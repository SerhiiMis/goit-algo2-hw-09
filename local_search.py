import random
import math

# üéØ Sphere function
def sphere_function(x):
    return sum(xi ** 2 for xi in x)

# üöÄ Hill Climbing algorithm
def hill_climbing(func, bounds, iterations=1000, epsilon=1e-6):
    # –°—Ç–∞—Ä—Ç–æ–≤–∞ —Ç–æ—á–∫–∞
    current = [random.uniform(low, high) for (low, high) in bounds]
    current_value = func(current)

    for _ in range(iterations):
        # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å—É—Å—ñ–¥–Ω—å–æ—ó —Ç–æ—á–∫–∏ –∑ –º–∞–ª–∏–º –∑—Å—É–≤–æ–º
        neighbor = [xi + random.uniform(-0.1, 0.1) for xi in current]
        # –û–±–º–µ–∂–µ–Ω–Ω—è –≤ –º–µ–∂–∞—Ö bounds
        neighbor = [max(min(xi, high), low) for xi, (low, high) in zip(neighbor, bounds)]
        neighbor_value = func(neighbor)

        # –Ø–∫—â–æ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –¥–æ—Å—Ç–∞—Ç–Ω—î ‚Äî –ø—Ä–∏–π–º–∞—î–º–æ —Ç–æ—á–∫—É
        if current_value - neighbor_value > epsilon:
            current = neighbor
            current_value = neighbor_value
        else:
            break  # –ó—É–ø–∏–Ω–∏—Ç–∏, —è–∫—â–æ –Ω–µ–º–∞—î –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è

    return current, current_value

# üß™ –ü–æ—Ä–æ–∂–Ω—ñ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —ñ–Ω—à–∏—Ö –º–µ—Ç–æ–¥—ñ–≤ (—Ä–µ–∞–ª—ñ–∑—É—î–º–æ –ø—ñ—Å–ª—è)
def random_local_search(func, bounds, iterations=1000, epsilon=1e-6):
    pass

def simulated_annealing(func, bounds, iterations=1000, temp=1000, cooling_rate=0.95, epsilon=1e-6):
    pass

# ‚ñ∂Ô∏è –í–∏–∫–æ–Ω–∞–Ω–Ω—è
if __name__ == "__main__":
    bounds = [(-5, 5), (-5, 5)]

    print("Hill Climbing:")
    hc_solution, hc_value = hill_climbing(sphere_function, bounds)
    print("–†–æ–∑–≤'—è–∑–æ–∫:", hc_solution, "–ó–Ω–∞—á–µ–Ω–Ω—è:", hc_value)

    print("\nRandom Local Search:")
    rls_solution, rls_value = random_local_search(sphere_function, bounds)
    print("–†–æ–∑–≤'—è–∑–æ–∫:", rls_solution, "–ó–Ω–∞—á–µ–Ω–Ω—è:", rls_value)

    print("\nSimulated Annealing:")
    sa_solution, sa_value = simulated_annealing(sphere_function, bounds)
    print("–†–æ–∑–≤'—è–∑–æ–∫:", sa_solution, "–ó–Ω–∞—á–µ–Ω–Ω—è:", sa_value)
